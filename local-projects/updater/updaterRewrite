#!/bin/bash
programName=$0
declare -A comArray=( 
    [pull]=true 
    [compile]=true
    [install]=false
    [pretend]=false
    [quiet]=false
    [clean]=false
    [verbose]=false
    [help]=false
    [nocol]=false
    [nodeps]=false
    [directory:]=false
    [root:]=false
    [recursive]=false
    [debug]=false
    [oneshot]=false
    [exclude:]=false
)
function debugMode()    #commands to do during debug mode
{
    if ${comArray["debug"]}; then echo "$@"
    fi
}

function equalToComArr() # check if a value is equivalent to a key in comArray
{
    debugMode "equalToComArr($*):"
    for key in "${!comArray[@]}"; do
        if [[ "$*" == "$key" ]]; then 
            return 1; debugMode "$* == $key"
        else return 0; fi
    done
}

function bracketArgs() #separate arguments from stuff like filenames, etc.
{
    bracket=false
    for arg in "$@"; do
        if $bracket; then
            debugMode "content: $arg"
            if ! equalToComArr "$arg"; then bracket=false; fi
        fi

        if [[ "$arg" == *: && $bracket == false ]]; then
            echo "$arg"
            bracket=true
            #declare -A content[$opener]
        fi
    done
}

function generalizeArgs() #remove -'s and extend abbreviations
{
    declare argArr=()
    declare invalidArr=()
    for arg in "$@"; do
        if [[ -z "$arg" ]]; then argArr+=("all"); fi                    #Pull -> Compile is the default method
        if [[ $arg == --[!-]* ]]; then arg=${arg:2}; argArr+=("$arg");  #remove "--" from args
        elif [[ "$arg" == -[^-]* ]]; then                               #remove "-" from args and extend abbreviations
            arg=${arg:1}
            for (( i=0; i < ${#arg}; i++ )); do
                case ${arg:$i:1} in
                    [0-9])          argArr+=("${arg:$i:1}"); ;;
                    u | [Aa])       argArr+=("all") ;;
                    C)              argArr+=("clean") ;;
                    c)              argArr+=("compile") ;;
                    d)              argArr+=("directory:") ;;
                    D)              comArray["debug"]=true ;;
                    [Ee])           argArr+=("exclude:") ;;
                    [Hh])           argArr+=("help")   ;;
                    [Ii])           argArr+=("install") ;;
                    [jJ])           argArr+=("jobs:") ;;
                    n)              argArr+=("nocol") ;;
                    N)              argArr+=("nodeps") ;;
                    [oO])           argArr+=("oneshot") ;;
                    p)              argArr+=("pretend") ;;
                    P)              argArr+=("pull") ;;
                    [Qq])           argArr+=("quiet") ;;
                    r)              argArr+=("recursive") ;;
                    R)              argArr+=("root:") ;;
                    U)              argArr+=("use:") ;;
                    [Vv])           argArr+=("verbose") ;;
                    *)              invalidArr+=("${arg:$i:1}") ;;
                esac
                debugMode "$arg"
            done
        else
            argArr+=("${arg}")
        fi
    done
    bracketArgs "${argArr[@]}"
    #generalArr["errors"]=${invalidArr[*]}
}

parseArgs()
{
    generalizeArgs "$@"
}
#Main
workingDir="$PWD"
rootDir=""
useFlags=""
declare excludedDirs=()
jobNum=1

parseArgs "$@"



